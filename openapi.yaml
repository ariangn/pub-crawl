openapi: 3.0.3
info:
  title: pub-crawl
  version: 0.1.0
  description: Collaborative EPUB Annotations API
servers:
  - url: http://localhost:8080
tags:
  - name: Auth
  - name: Me
  - name: Groups
  - name: Books
  - name: Annotations
security:
  - bearerAuth: []

paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: Create account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SignupReq' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResp' }
        '409': { $ref: '#/components/responses/Conflict' }

  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoginReq' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResp' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Rotate refresh token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TokenPair' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /me:
    get:
      tags: [Me]
      summary: Current user profile
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /groups:
    get:
      tags: [Groups]
      summary: Search groups by name or owner username
      parameters:
        - in: query
          name: query
          schema: { type: string }
          required: false
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, default: 20 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Group' }
                  total:
                    type: integer
    post:
      tags: [Groups]
      summary: Create a new group (creator becomes ADMIN)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateGroupReq' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Group' }

  /groups/join:
    post:
      tags: [Groups]
      summary: Join a group via invite code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [inviteCode]
              properties:
                inviteCode: { type: string }
      responses:
        '200':
          description: Joined
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GroupMember' }
        '404': { $ref: '#/components/responses/NotFound' }

  /groups/{groupId}:
    get:
      tags: [Groups]
      summary: Get group overview
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GroupDetail' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /groups/{groupId}/members:
    get:
      tags: [Groups]
      summary: List members of a group
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/GroupMember' }

  /groups/{groupId}/invite:
    post:
      tags: [Groups]
      summary: Generate (or fetch) invite code (ADMIN only)
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  inviteCode: { type: string }
        '403': { $ref: '#/components/responses/Forbidden' }

  /groups/{groupId}/books:
    get:
      tags: [Books]
      summary: List books in a group
      parameters:
        - $ref: '#/components/parameters/GroupId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Book' }
    post:
      tags: [Books]
      summary: Upload an EPUB to this group
      parameters:
        - $ref: '#/components/parameters/GroupId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, title]
              properties:
                title: { type: string }
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Book' }
        '415': { $ref: '#/components/responses/UnsupportedMediaType' }

  /books/{bookId}:
    get:
      tags: [Books]
      summary: Get book metadata (frontend will fetch EPUB via /uploads key)
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Book' }
        '404': { $ref: '#/components/responses/NotFound' }

  /annotations:
    get:
      tags: [Annotations]
      summary: List annotations for a book (optionally filter by chapter)
      parameters:
        - in: query
          name: bookId
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: chapterHref
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, minimum: 0, default: 0 }
        - in: query
          name: size
          schema: { type: integer, minimum: 1, default: 50 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Annotation' }
                  total:
                    type: integer
    post:
      tags: [Annotations]
      summary: Create annotation
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateAnnotationReq' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Annotation' }

  /annotations/{annotationId}:
    delete:
      tags: [Annotations]
      summary: Delete annotation (author or ADMIN)
      parameters:
        - $ref: '#/components/parameters/AnnotationId'
      responses:
        '204': { description: No Content }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }

  /annotations/{annotationId}/replies:
    get:
      tags: [Annotations]
      summary: List replies for an annotation
      parameters:
        - $ref: '#/components/parameters/AnnotationId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Reply' }
    post:
      tags: [Annotations]
      summary: Add reply (only valid for NOTE-type annotations)
      parameters:
        - $ref: '#/components/parameters/AnnotationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text: { type: string, minLength: 1, maxLength: 2000 }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Reply' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    GroupId:
      in: path
      name: groupId
      required: true
      schema: { type: string, format: uuid }
    BookId:
      in: path
      name: bookId
      required: true
      schema: { type: string, format: uuid }
    AnnotationId:
      in: path
      name: annotationId
      required: true
      schema: { type: string, format: uuid }

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Not Found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: Conflict
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    UnsupportedMediaType:
      description: Unsupported media type
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    SignupReq:
      type: object
      required: [username, displayName, password]
      properties:
        username: { type: string, minLength: 3, maxLength: 32 }
        displayName: { type: string, minLength: 1, maxLength: 64 }
        password: { type: string, minLength: 8, maxLength: 128 }
        pfpUrl: { type: string, format: uri, nullable: true }
    LoginReq:
      type: object
      required: [username, password]
      properties:
        username: { type: string }
        password: { type: string }
    TokenPair:
      type: object
      properties:
        accessToken: { type: string }
        refreshToken: { type: string }
    AuthResp:
      type: object
      properties:
        tokens: { $ref: '#/components/schemas/TokenPair' }
        user: { $ref: '#/components/schemas/User' }

    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        username: { type: string }
        displayName: { type: string }
        pfpUrl: { type: string, nullable: true }
        colorHex: { type: string, example: "#ffd66e" }
        createdAt: { type: string, format: date-time }

    Group:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        pfpUrl: { type: string, nullable: true }
        ownerId: { type: string, format: uuid }

    GroupDetail:
      type: object
      properties:
        group: { $ref: '#/components/schemas/Group' }
        members:
          type: array
          items: { $ref: '#/components/schemas/GroupMember' }
        books:
          type: array
          items: { $ref: '#/components/schemas/Book' }

    GroupMember:
      type: object
      properties:
        id: { type: string, format: uuid }
        groupId: { type: string, format: uuid }
        userId: { type: string, format: uuid }
        role:
          type: string
          enum: [ADMIN, MEMBER]
        highlightColor:
          type: string
          description: per-member color override

    CreateGroupReq:
      type: object
      required: [name]
      properties:
        name: { type: string, minLength: 1, maxLength: 80 }
        pfpUrl: { type: string, nullable: true }

    Book:
      type: object
      properties:
        id: { type: string, format: uuid }
        groupId: { type: string, format: uuid }
        title: { type: string }
        storageKey:
          type: string
          description: path served by backend (e.g., /uploads/ab12.epub)
        sizeBytes: { type: integer }
        status:
          type: string
          enum: [UPLOADED, READY, FAILED]
        createdAt: { type: string, format: date-time }

    Annotation:
      type: object
      properties:
        id: { type: string, format: uuid }
        bookId: { type: string, format: uuid }
        groupId: { type: string, format: uuid }
        authorId: { type: string, format: uuid }
        type:
          type: string
          enum: [HIGHLIGHT, STICKER, NOTE]
        chapterHref: { type: string }
        cfiRange: { type: string, description: EPUB CFI range string }
        payload:
          type: object
          description: free-form; e.g., { color?, stickerId?, text? }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time, nullable: true }

    CreateAnnotationReq:
      type: object
      required: [bookId, chapterHref, cfiRange, type]
      properties:
        bookId: { type: string, format: uuid }
        chapterHref: { type: string }
        cfiRange: { type: string }
        type:
          type: string
          enum: [HIGHLIGHT, STICKER, NOTE]
        payload:
          type: object
          additionalProperties: true

    Reply:
      type: object
      properties:
        id: { type: string, format: uuid }
        annotationId: { type: string, format: uuid }
        authorId: { type: string, format: uuid }
        text: { type: string }
        createdAt: { type: string, format: date-time }

    Error:
      type: object
      properties:
        error: { type: string }
        message: { type: string }
        status: { type: integer }
